<!doctype html>
<html>
    <head>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/nanogallery2/3.0.5/css/nanogallery2.min.css" integrity="sha512-6sOT9zKSKq1CYgNMqtcY84tFPDnG1yX5mxwdGQiAVpAomVr2kUKJ//pFeU/KfaZDVCOru5iFOVswpT4RWWF2dQ==" crossorigin="anonymous" />
        <link rel="stylesheet" href="/style.css">
    </head>
    <body>
        <div id="header">
            <a href="/">&lt; Albums</a>
            <h1><%= album.name %></h1>
        </div>

        <% if authenticated %>
            <div class="pane" id="manage-pane">
                <h2>Manage your photos</h2>
                <button onclick="archiveSelection()">Archive selection</button>
                <button onclick="unarchiveSelection()">Unarchive selection</button>
                <br>
                <button id="regenerate-album-cover" onclick="regenerateCover()">Regenerate album cover</button>
                <hr>
                <p>
                    Who can view this album?
                    <select id="album-visibility-select">
                        <option value="public"  <%= album.album_visibility == "public"  ? "selected" : "" %>>Anyone</option>
                        <option value="private" <%= album.album_visibility == "private" ? "selected" : "" %>>Only me</option>
                    </select>
                </p>
                <p>
                    Who can view this album's archived photos?
                    <select id="album-archive-visibility-select">
                        <option value="public"  <%= album.album_archive_visibility == "public"  ? "selected" : "" %>>Anyone who can view the album</option>
                        <option value="private" <%= album.album_archive_visibility == "private" ? "selected" : "" %>>Only me</option>
                    </select>
                </p>
                <button id="save-visibility-settings" onclick="saveVisibilitySettings()">Save visibility settings</button>
            </div>
        <% end %>

        <div id="gallery"></div>
        
        <% if archived_image_count > 0 %>
            <div class="pane">
                <% if include_archived %>
                    <p>
                        <%= archived_image_count %> archived images are being shown.
                        <a href="<%= album.url %>">Hide archived images</a>
                    </p>
                <% else %>
                    <p>
                        <%= archived_image_count %> images are archived and not currently shown.
                        <a href="<%= album.url %>?archived=true">Include archived images</a>
                    </p>
                <% end %>
            </div>
        <% end %>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/picomodal/3.0.0/picoModal.min.js" integrity="sha512-bCd+wlawQOsxutqlrFLgATxcGnQcb2PQ/Og8DtTcLzJVssqgSk3Ro0qUuOKF3fgZwee622W/i91fGYrd32zFpw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js" integrity="sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/nanogallery2/3.0.5/jquery.nanogallery2.min.js" integrity="sha512-tvpLVnZrWnnNzV2921XEMx4xkFTUF8xg3s+Mi6cvC/R7A6X1FkpBUXPJFa3Xh5uD9BvOZ2tHeYq/5ZqrweW86Q==" crossorigin="anonymous"></script>
        
        <script>            
            function getGalleryData() {
                return $("#gallery").nanogallery2("data");
            }

            function getSelectedImages() {
                return getGalleryData().items
                    .filter(x => x.kind === "image")
                    .filter(img => img.selected);
            }

            function unselectAll() {
                return $("#gallery").nanogallery2("itemsSetSelectedValue",
                    getSelectedImages());
            }

            async function archiveSelection() {
                await Promise.all(getSelectedImages().map(async (img) => {
                    const response = await fetch(img.src + "/archive", {
                        method: "POST",
                    });
                    if (response.status != 200 && response.status != 204) {
                        throw response;
                    }
                    img.customData.focal.archived = true;
                    thumbnailInit(null, img, null);
                }));
                unselectAll();
            }

            async function unarchiveSelection() {
                await Promise.all(getSelectedImages().map(async (img) => {
                    const response = await fetch(img.src + "/unarchive", {
                        method: "POST",
                    });
                    if (response.status != 200 && response.status != 204) {
                        throw response;
                    }
                    img.customData.focal.archived = false;
                    thumbnailInit(null, img, null);
                }));
                unselectAll();
            }

            async function regenerateCover() {
                $("#regenerate-album-cover").prop("disabled", true);
                try {
                    await fetch("<%= album.cover_url %>/regenerate", {
                        method: "POST",
                    });
                } finally {
                    $("#regenerate-album-cover").prop("disabled", false);
                }
            }

            async function saveVisibilitySettings() {
                $("#save-visibility-settings").prop("disabled", true);
                try {
                    const albumVisibility = $("#album-visibility-select").val();
                    const albumArchiveVisibility = $("#album-archive-visibility-select").val();
                    const body =
                        `album_visibility=${albumVisibility}&` +
                        `album_archive_visibility=${albumArchiveVisibility}`;
                    
                    await fetch("<%= album.url %>/visibility", {
                        method: "POST",
                        body: body,
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                        },
                    });
                } finally {
                    $("#save-visibility-settings").prop("disabled", false);
                }
            }

            function thumbnailInit(_, item, _) {
                const archivedIndicator = item.$elt.find(".thumbnail-archived-indicator");
                if (item.customData.focal.archived) {
                    archivedIndicator.css("display", "block");
                } else {
                    archivedIndicator.css("display", "none");
                }
            }

            function toolbarClick(name, _, item) {
                // Download RAW
                if (name === "custom1") {
                    alternativeFormats = item.customData.focal.alternativeFormats;
                    formatButtons =
                        alternativeFormats.length == 0
                        ? "<p>No alternative formats available for this image.</p>"
                        : alternativeFormats.map(fmt =>
                            `<a href=${fmt.url}>
                                <button class=\"width-100\">${fmt.description}</button>
                            </a>`
                        ).join("");
                    picoModal("<h2>Other Formats</h2>" + formatButtons).show();
                }
            }
            
            $("#gallery").nanogallery2({
                items: [
                    <% images.each do |image| %>
                        {
                            src: "<%= image.url %>",
                            srct: "<%= image.thumbnail_url %>",
                            customData: {
                                focal: {
                                    archived: <%= image.archived? %>,
                                    alternativeFormats: <%= image.alternative_format_details.to_json %>,
                                },
                            },
                        },
                    <% end %>
                ],

                thumbnailSelectable: <%= authenticated %>,
                thumbnailHoverEffect2: null,
                thumbnailToolbarImage: {
                    topRight: "custom1",
                },
                viewerTools: {
                    topRight: "custom1, zoomButton, closeButton",
                },
                icons: {
                    thumbnailCustomTool1: "<b class=\"thumbnail-archived-indicator\">Archived</b>",
                    viewerCustomTool1: "<b data-micromodal-trigger=\"modal-formats\">Other Formats</b>",
                },

                fnThumbnailInit: thumbnailInit,
                fnImgToolbarCustClick: toolbarClick,
            });
        </script>
    </body>
</html>
